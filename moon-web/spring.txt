@Scope("")
spring中bean的scope属性，有如下5种类型：
    singleton 表示在spring容器中的单例，通过spring容器获得该bean时总是返回唯一的实例(默认）
    prototype表示每次获得bean都会生成一个新的对象
    request表示在一次http请求内有效（只适用于web应用）
    session表示在一个用户会话内有效（只适用于web应用）
    globalSession表示在全局会话内有效（只适用于web应用）


@Singleton
@Lazy(false)
@Component
ApplicationContext实现的默认行为就是在启动时将所有singleton bean提前进行实例化（也就是依赖注入）。提前实例化意味着作为初始化过程的一部分，ApplicationContext实例会创建并配置所有的singleton bean。通常情况下这是件好事，因为这样在配置中的任何错误就会即刻被发现（否则的话可能要花几个小时甚至几天）。

<bean id="testBean" class="com.fhx.TestBean"> 该bean默认的设置为：
<bean id="testBean" class="com.fhx.TestBean" lazy-init="false"> 表示spring启动时，立刻进行实例化。

【注意：】
	1. lazy-init 设置只对scop属性为singleton的bean起作用：
           如果一个bean的scope属性为scope=“pototype“时，即使设置了lazy-init="false"，容器启动时不实例化bean，而是调用getBean方法是实例化的
	2. 如果一个设置了立即加载的bean，关联调用的bean也会被实例化。
  3.      在容器层次中通过在<beans/>元素上使用'default-lazy-init'属性来控制延迟初始化也是可能的。如下面的配置：
           <beans default-lazy-init="true"><!-- no beans will be eagerly pre-instantiated... --></beans>

另外加以说明:
init-method属性指定初始化时执行的方法，distory-method属性指定bean销毁时执行的方法。